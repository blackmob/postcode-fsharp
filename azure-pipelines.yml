# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables: 
  buildVersion: $(MajorVersion).$(MinorVersion).$(PatchVersion).$(Build.BuildID) 

trigger:
- master

pool:
  vmImage: 'Ubuntu-16.04'

name: $(MajorVersion).$(MinorVersion).$(PatchVersion).$(Build.BuildID)

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: restore
    projects: '**/*.fsproj'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '**/*.fsproj'
    arguments: '--configuration Release --output $(Build.BinariesDirectory)' 

- script: dotnet test './FSharp.Postcode.Tests/FSharp.Postcode.Tests.fsproj' --logger trx
- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

- script: dotnet test './FSharp.Postcode.Exhaustive.Tests/FSharp.Postcode.Exhaustive.Tests.fsproj' --logger trx
- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'   

- task: DotNetCoreCLI@2
  displayName: Pack
  inputs:
    command: pack
    projects: 
    configuration: 'release'
    packagesToPack: './FSharp.Postcode/FSharp.Postcode.fsproj'
    packDirectory: $(Build.BinariesDirectory)
    versioningScheme: 'byBuildNumber'
- task: NuGetCommand@2
  inputs:
    command: 'push'
    feedsToUse: 'select'
    packagesToPush: '$(Build.BinariesDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'external'
    versioningScheme: 'off'
    versioningScheme: 'byBuildNumber'
    
- task: CopyFiles@2
  inputs:
    cleanTargetFolder: true
    sourceFolder: $(Build.BinariesDirectory)
    contents: '**/*'
    targetFolder: $(Build.ArtifactStagingDirectory)

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: Fsharp.Postcode-$(buildVersion)

